/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.19).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.DTOs.PlaceCreationDTO;
import io.swagger.DTOs.PlaceUpdateDTO;
import io.swagger.annotations.*;
import io.swagger.entities.Place;
import io.swagger.model.PlaceDetails;
import io.swagger.model.PlaceFilterData;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.math.BigDecimal;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2021-04-05T23:15:12.065+02:00")

@Validated
@Api(value = "place", description = "the place API")
@RequestMapping(value = "")
public interface PlaceApi {

	@ApiOperation(value = "Approve suggestion with given ID.", nickname = "approveSuggestion", notes = "", authorizations = {
			@Authorization(value = "recycleasy_auth", scopes = {
					@AuthorizationScope(scope = "read", description = "read data"),
					@AuthorizationScope(scope = "write", description = "modify data")
			})
	}, tags = {"admin",})
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Place approved successfully."),
			@ApiResponse(code = 403, message = "Only admin has access to this operation."),
			@ApiResponse(code = 404, message = "Suggestion doesnt exist.")})
	@RequestMapping(value = "/place/approve/{suggestionId}",
			produces = {"application/json"},
			consumes = {"application/json", "application/x-www-form-urlencoded"},
			method = RequestMethod.POST)
	ResponseEntity<Void> approveSuggestion(@ApiParam(value = "Authorization header", required = true) @RequestHeader(value = "Authorization", required = true) String authorization, @ApiParam(value = "ID of place suggestion", required = true) @PathVariable("suggestionId") BigDecimal suggestionId);


	@ApiOperation(value = "Create place", nickname = "createPlace", notes = "", authorizations = {
			@Authorization(value = "recycleasy_auth", scopes = {
					@AuthorizationScope(scope = "read", description = "read data"),
					@AuthorizationScope(scope = "write", description = "modify data")
			})
	}, tags = {"place",})
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Place has been created successfully."),
			@ApiResponse(code = 400, message = "Some of the required fields are missing."),
			@ApiResponse(code = 403, message = "Only admin has access to this operation.")})
	@RequestMapping(value = "/place/create",
			produces = {"application/json"},
			consumes = {"application/json"},
			method = RequestMethod.POST)
	ResponseEntity<Void> createPlace(@ApiParam(value = "Authorization header", required = true) @RequestHeader(value = "Authorization", required = true) String authorization, @ApiParam(value = "Place creation payload", required = true) @Valid @RequestBody PlaceCreationDTO body);


	@ApiOperation(value = "Delete place", nickname = "deletePlace", notes = "", authorizations = {
			@Authorization(value = "recycleasy_auth", scopes = {
					@AuthorizationScope(scope = "read", description = "read data"),
					@AuthorizationScope(scope = "write", description = "modify data")
			})
	}, tags = {"place",})
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Place has been deleted."),
			@ApiResponse(code = 403, message = "Only admin has access to this operation.."),
			@ApiResponse(code = 404, message = "Place doesnt exist.")})
	@RequestMapping(value = "/place/delete/{placeId}",
			produces = {"application/json"},
			consumes = {"application/json", "application/x-www-form-urlencoded"},
			method = RequestMethod.DELETE)
	ResponseEntity<Void> deletePlace(@ApiParam(value = "Authorization header", required = true) @RequestHeader(value = "Authorization", required = true) String authorization, @ApiParam(value = "ID of place to reove", required = true) @PathVariable("placeId") Long placeId);


	@ApiOperation(value = "Get all places", nickname = "getAllPlaces", notes = "", response = Place.class, responseContainer = "List", tags = {"place",})
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "List of all places", response = Place.class, responseContainer = "List")})
	@RequestMapping(value = "/place/getAll",
			produces = {"application/json"},
			consumes = {"application/json"},
			method = RequestMethod.GET)
	ResponseEntity<List<Place>> getAllPlaces();


	@ApiOperation(value = "Get places by specified filters", nickname = "getFilteredPlaces", notes = "", response = Place.class, tags = {"place",})
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Returns objects meeting specified filters.", response = Place.class)})
	@RequestMapping(value = "/place/filter",
			produces = {"application/json"},
			consumes = {"application/json", "application/x-www-form-urlencoded"},
			method = RequestMethod.POST)
	ResponseEntity<Place> getFilteredPlaces(@ApiParam(value = "Place update payload", required = true) @Valid @RequestBody PlaceFilterData body);


	@ApiOperation(value = "Get place details", nickname = "placeDetails", notes = "", response = PlaceDetails.class, tags = {"place",})
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Details of place with given Id", response = PlaceDetails.class),
			@ApiResponse(code = 404, message = "Place doesnt exist.")})
	@RequestMapping(value = "/place/getDetails/{placeId}",
			produces = {"application/json"},
			consumes = {"application/json", "application/x-www-form-urlencoded"},
			method = RequestMethod.GET)
	ResponseEntity<PlaceDetails> placeDetails(@ApiParam(value = "ID of place", required = true) @PathVariable("placeId") Long placeId);


	@ApiOperation(value = "Reject place suggestion with given ID", nickname = "rejectSuggestion", notes = "", authorizations = {
			@Authorization(value = "recycleasy_auth", scopes = {
					@AuthorizationScope(scope = "read", description = "read data"),
					@AuthorizationScope(scope = "write", description = "modify data")
			})
	}, tags = {"admin",})
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Place rejected successfully."),
			@ApiResponse(code = 403, message = "Only admin has access to this operation."),
			@ApiResponse(code = 404, message = "Suggestion doesnt exist.")})
	@RequestMapping(value = "/place/reject/{suggestionId}",
			produces = {"application/json"},
			consumes = {"application/json", "application/x-www-form-urlencoded"},
			method = RequestMethod.POST)
	ResponseEntity<Void> rejectSuggestion(@ApiParam(value = "Authorization header", required = true) @RequestHeader(value = "Authorization", required = true) String authorization, @ApiParam(value = "ID of place suggestion", required = true) @PathVariable("suggestionId") BigDecimal suggestionId);


	@ApiOperation(value = "Suggest new place", nickname = "sendSuggestion", notes = "", tags = {"place",})
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Suggestion sent successfully.")})
	@RequestMapping(value = "/place/suggest",
			produces = {"application/json"},
			consumes = {"application/json", "application/x-www-form-urlencoded"},
			method = RequestMethod.POST)
	ResponseEntity<Void> sendSuggestion(@ApiParam(value = "Place creation payload", required = true) @Valid @RequestBody PlaceCreationDTO body);


	@ApiOperation(value = "Update place", nickname = "updatePlace", notes = "", authorizations = {
			@Authorization(value = "recycleasy_auth", scopes = {
					@AuthorizationScope(scope = "read", description = "read data"),
					@AuthorizationScope(scope = "write", description = "modify data")
			})
	}, tags = {"place",})
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Place has been updated successfully."),
			@ApiResponse(code = 400, message = "User not sent name or place"),
			@ApiResponse(code = 403, message = "Only admin has access to this operation."),
			@ApiResponse(code = 404, message = "Place doesnt exist.")})
	@RequestMapping(value = "/place/update/{placeId}",
			produces = {"application/json"},
			consumes = {"application/json", "application/x-www-form-urlencoded"},
			method = RequestMethod.PUT)
	ResponseEntity<Void> updatePlace(@ApiParam(value = "Authorization header", required = true) @RequestHeader(value = "Authorization", required = true) String authorization, @ApiParam(value = "Place update payload", required = true) @Valid @RequestBody PlaceUpdateDTO body, @ApiParam(value = "ID of place to update", required = true) @PathVariable("placeId") Long placeId);

}
